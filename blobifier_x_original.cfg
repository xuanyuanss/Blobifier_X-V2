######################## Blobifier_X ########################

########################### 声明 ############################
# Blobifier_X是Blobifier的一个变体（X-MEN？，No *＾-＾*），是一个用于多色打印的喷嘴排除废料的项目，适配于Voron2.4等龙门移动式3D打印机。具备以下功能：
# 1.可用于单热端多色打印换料后耗材冲刷，可省掉擦料塔，但建议使用很小的擦料塔以清理喷嘴溢出的耗材。
# 2.本配置文件主要是配合ERCF和HAPPY HARE使用，HAPPY HARE中具体参数配置请参考HAPPY HARE及BLOBIFIER文档。
# 3.使用本想目前，请您确保了解本项目的、工作过程，避免对打印机造成意外损害。如不慎产生意外损失，开发人员不承担任何责任。

# 其实Blobifier_X物理结构已与Blobifier完全不同，仅是参考了其喷嘴冲刷创意，同时在软件部分做针对性修改，原版Blobifier请移步https://github.com/Dendrowen/Blobifier。
# 原版Blobifier对voron2.4并不友好，需要频繁升降龙门，并且牺牲热床有效打印面积，同时可能存在打印头撞击模型的风险。所以我设计了Blobifier_X。
# Blobifier_X安装在龙门上，冲刷时不需要降低龙门，而是通过一个小的步进电机实现托盘的升降而促使blob成型。

# 目前VORON2结构打印机废料处理尚无完美方案，目前方案基本满足使用，随着打印的进行，龙门逐渐升高，基本不会出现Blobifier_X撞击废料的风险。
# 感谢Blobifier开源项目，作者的创意真的很棒。

# 感谢您选择本项目，祝您生活愉快！

#！！！本宏中保留了一些利用铜刷清洁喷嘴的代码，但未启用，亦未调试，给那些想使用清洁刷的朋友使用，但请自行配置调试，切记切记！！！

# 轩辕十四
# 2024.8.17

# 2024.12.18更新
# 针对Happy Hare 3.0进行了调整

# 2025.4.9更新
# 简单优化

# 2025.5.3更新
# ！！！更新V2版本，大更新！！！
# 使用个人修改后的manual_stepper，命名为manual_stepper_fix（以便与原指令区分），修改的指令增加 相对移动 参数，避免了冲刷时的频繁置零、归位，使托盘零位保持固定，
# 有效避免了误操作可能导致的混乱，同时便于调试。要使用manual_stepper_fix只需将manual_stepper_fix.py导入/home/你的用户名/klipper/klippy/extras目录后重启上位机即可。
# 修改后的指令MANUAL_STEPPER_FIX调用，格式和参数用方法与原MANUAL_STEPPER指令相同，同时增加了RELATIVE=1或0参数，命令调用时添加RELATIVE=1参数，既是相对移动，
# RELATIVE=0时为绝对移动，即与原MANUAL_STEPPER指令效果相同。
# MANUAL_STEPPER_FIX需将Klipper更新至V0.13版本，因V0.12版本的BUG，该命令会报错。
# Klipper V0.13版本修复了之前存在的使用STOP_ON_ENDSTOP=1参数时在限位出发后仍需等待命令执行所需的完整时间的缺陷，这可有效节省等待时间，强烈建议更新！
# 其实使用MANUAL_STEPPER_FIX命令替代MANUAL_STEPPER也可有效减少上述缺陷引起的过长等待时间，因为该命令只需归位一次。
# Blobifier_X的V1版本代码仍可在Klipper V0.13版本下使用，基于上述描述仍建议使用manual_stepper_fix + Blobifier_X V2版本.

# 2025.5.4更新
# 更新至V2.1版本
# 冲刷方式改为脉动形式。

# 2025.5.24调整
# 本版本使用原版manual_stepper

# 2025.5.26调整
# 增加参数以补偿冲刷开始前的耗材溢出。

##########################################################################################
##########################################################################################

# Blobifier_X硬件配置文件
[include blobifier_x_hw_original.cfg]

##########################################################################################
[gcode_macro BLOBIFIER_X]
# 这些参数定义了您的丝材清洗。回抽变量用于在清洗后立即回抽，以防止不必要的渗漏。一些丝材特别容易渗漏，可能在回抽后一两秒内继续从喷嘴渗出。根据需要更新。
variable_bl_position_max:                20.0   # BLOBIFIER_X托盘的最大行程。
variable_purge_spd:                      400    # 清洗速度：400毫米/分钟。
variable_purge_temp_min:                 200    # 最低喷嘴清洗温度：200摄氏度。
variable_retract_speed:                 2000    # 回抽速度：毫米/分钟。

# 这些参数定义了您的擦洗次数、移动速度、安全Z轴间隙以及您想要擦洗的次数。根据需要更新。

variable_travel_spd_xy:                10000    # X和Y轴上的移动速度（非清洗）：毫米/分钟。
variable_blob_kick_spd:                10000    # 将残留物踢开的速度：毫米/分钟。
variable_wipe_spd_xy:                  10000    # 擦拭速度：毫米/分钟。
variable_wipe_qty:                         3    # 擦拭次数（一个完整的擦拭过程：左-右-左或右-左-右）。


# 擦嘴装置X坐标
variable_wiper_x:                          110    # 擦嘴装置X坐标

# 冲刷位置，即喷嘴置于托盘中心时喷嘴的坐标
variable_purge_x:                          60     #冲刷位置X坐标
variable_purge_y:                          254    #冲刷位置Y坐标，通常为Y最大行程
variable_kick_x:                           80     #踢除blob后X坐标，注意避免撞到切刀座
variable_kick_ready_x:                     105    #准备踢除blob时X坐标，通常位于擦嘴和拉屎位置中间靠近擦嘴
variable_yield_y:                          203    #打印头避让blob，调整此值使打印头底部与托盘前后距离不少于15mm的部位避开即可，避免不正确的撞击blob，用于下次停靠时敲击blob

##########################################################################################
# BLOB TUNING
#
# 下一节定义了如何执行清洗序列。这是您调整清洗以创建漂亮残留物的地方。请参阅视觉参考以获得更好的理解。视觉参考中填充了示例值。以下是一些有助于调整的指南。
#
#                          \_____________/
#                             |___|___|
#                                \_/            ______________  < End of third iteration.
#                                / \                                  HEIGHT:   3 x iteration_z_raise - (2 + 1) x iteration_z_change  (3 x 5 - 2 x 1.2 = 11.4)
#                               |   |                                 EXTRUDED: 3 x max_iteration_length                              (3 x 50 = 150)
#                              /     \          ______________  < End of second iteration.
#                             |       \                               HEIGHT:   2 x iteration_z_raise - 1 x iteration_z_change        (2 x 5 - 1 x 1.2 = 8.8)
#                            /         |                              EXTRUDED: 2 x max_iteration_length                              (2 x 50 = 100)
#                           |           \       ______________  < End of first iteration. 
#                          /             \                            HEIGHT:   1 x iteration_z_raise                                 (1 x 5 = 5)
#                         |               |                           EXTRUDED: 1 x max_iteration_length                              (1 x 50 = 50)
#___________               \             /      ______________  < Start height of the nozzle. default value: 1.5mm
#           |_______________\___________/_      ______________  < Bottom of the tray
#           |_____________________________|
#           |
# 
########################### BLOB TUNING ##############################
# +-------------------------------------+----------------------------+
# |  Filament sticks to the nozzle at   | Incr. purge start          |
# |    initial purge (first few mm)     |                            |
# +-------------------------------------+----------------------------+
# |  Filament scoots out from under     | Incr. temperature          |
# |  the nozzle at the first iteration  | Decr. z_raise              |
# |                                     | Incr. purge_length_maximum |
# +-------------------------------------+----------------------------+
# |  Filament scoots out from under the | Decr. purge_spd            |
# |  the nozzle at later iterations     | Decr. z_raise_exp          |
# |                                     | Decr. z_raise              |
# |                                     | Incr. purge_length_maximum |
# +-------------------------------------+----------------------------+
# |  Filament sticks to the nozzle at   | Incr. z_raise_exp          |
# |         later iterations            |     (Not above 1)          |
# +-------------------------------------+----------------------------+
#

# 每次迭代托盘下降的量
variable_bl_drop:                                15

# 当喷嘴相对变高且残留物变宽时，需要减少托盘下降量。
variable_bl_drop_exp:                            0.85

# 清洗前和清洗后的停留时间（毫秒），以释放喷嘴的压力。
variable_eject_hop:                               2.0

# 清洗前和清洗后的停留时间（毫秒），以释放喷嘴的压力，并使blob冷却。
variable_pressure_release_time:                   1000

# 设置零件冷却风扇的速度。禁用可以帮助防止喷嘴冷却并刺激流动，启用它可以防止残留物粘在一起。值的范围从0到1，或者如果您不想更改，则为-1。
#variable_part_cooling_fan:                      -1  # Leave it unchanged
#variable_part_cooling_fan:                       0  # Disable the fan
variable_part_cooling_fan:                        1  # Run it at full speed


##########################################################################################
# 清洗长度调整
#
# 当工具映射的purge_volumes或参数PURGE_LENGTH未设置时，使用的默认清洗长度。
variable_purge_length:                          60

# 即使没有更换工具，也要执行的绝对最小清洗长度。
variable_purge_length_minimum:                  30  

# 单个blob最大冲刷量(mm)，如果总冲刷量超过此设定值，将自动冲刷多个blob。
variable_purge_length_maximum:                  120

# 切片机的值通常有点浪费。在这里调整以获得最优值。1.0是一个好的起点。
variable_purge_length_modifier:                  1.0

# 在清洗体积之后要添加的丝材长度。清洗体积并不总是考虑到刀具，因此从深色到浅色的更换可能足够长，但从浅色到深色可能太短。当您应该更改这个值时：
# 增加：当深色到浅色的更换很好，但浅色到深色的更换不好时。
# 减少：当浅色到深色的更换很好，但深色到浅色的更换不好时。不要忘记增加purge_length_modifier。
variable_purge_length_addition:                 0

# 为了避免因耗材溢出导致冲刷起始时挤出的料可能无法很好的黏在托盘上，使用以下参数补偿耗材溢出。该参数不会影响总的冲刷量。
variable_filament_oozing_adjust:                5

gcode:

##########################################################################################
# 记录状态（包括风扇、速度等）
#
  # General state
  SAVE_GCODE_STATE NAME=BLOBIFIER_X_state
  
##########################################################################################
# 检查归零状态
#
  {% if "xy" not in printer.toolhead.homed_axes %}    
    RESPOND MSG="BLOBIFIER_X: 请先归零XY"
  {% else %}
    
    # 模型冷却风扇
    {% if part_cooling_fan >= 0 %}
      # 保存风扇速度
      {% set backup_fan_speed = printer.fan.speed %}
      # 设置风扇速度
      M106 S{part_cooling_fan * 255}
    {% endif %}

    # 设置挤出速度为100%，以确保正确的冲刷速度
    {% set backup_feedrate = printer.gcode_move.speed_factor %}
    M220 S100

##########################################################################################
# 定义基本变量
#
    {% set sequence_vars = printer['gcode_macro _MMU_SEQUENCE_VARS'] %}
    {% set park_vars = printer['gcode_macro _MMU_PARK'] %}
    {% set filament_diameter = printer.configfile.config.extruder.filament_diameter|float %}
    {% set filament_cross_section = (filament_diameter/2) ** 2 * 3.1415 %}
    {% set from_tool = printer.mmu.last_tool %}
    {% set to_tool = printer.mmu.tool %}
   
    # 从切片软件获取冲刷量 (请参考 
    # https://github.com/moggieuk/Happy-Hare/blob/variables/doc/gcode_preprocessing.md)
    {% set pv = printer.mmu.slicer_tool_map.purge_volumes %}
           
##########################################################################################
# 确定冲刷长度
#
    {% if params.PURGE_LENGTH %} # ======= PARAM PURGE LENGTH ==============================
      {action_respond_info("BLOBIFIER_X: 提供了 PURGE_LENGTH 参数")}
      {% set purge_len = params.PURGE_LENGTH|float %}
    {% elif from_tool == to_tool and to_tool >= 0 %} # ==== TOOL DIDN'T CHANGE =============
      {action_respond_info("BLOBIFIER_X: tool未切换 (T%s > T%s), %s" % (from_tool, to_tool, "priming" if purge_length_minimum else "skipping"))}
      {% set purge_len = 0 %}
    {% elif pv %} # ========================== 从切片软件获取 ===============================
      {% if from_tool < 0 and to_tool >= 0%}
        {action_respond_info("BLOBIFIER_X: from tool 未知. 寻找最大值用于 T? > T%d" % to_tool)}
        {% set purge_vol = pv|map(attribute=to_tool)|max %}
      {% elif to_tool < 0 %}
        {action_respond_info("BLOBIFIER_X: tool(s) 未知. 寻找最大值")}
        {% set purge_vol = pv|map('max')|max %}
      {% else %}
        {% set purge_vol = pv[from_tool][to_tool]|float * purge_length_modifier %}
        {action_respond_info("BLOBIFIER_X: 切换 T%s > T%s" % (from_tool, to_tool))}
      {% endif %}
      {% set purge_len = purge_vol / filament_cross_section + printer.mmu.extruder_filament_remaining + park_vars.retracted_length + purge_length_addition %}
    {% else %} # ============================= 使用配置参数 =================================
      {action_respond_info("BLOBIFIER_X: 没有 toolmap or PURGE_LENGTH. 使用默认值")}
      {% set purge_len = purge_length|float + printer.mmu.extruder_filament_remaining + park_vars.retracted_length %}
    {% endif %}
    # ==================================== 应用最小冲刷量 ===================================
    {% set purge_len = [purge_len,purge_length_minimum]|max - filament_oozing_adjust %}
    {action_respond_info("BLOBIFIER_X: 冲刷长度 %.2fmm" % (purge_len))}

##########################################################################################
# 冲刷序列
#
    # 检查清洗长度，如果有必要则进行清洗。
    {% if purge_len|float > 0 %}

      # ERCF取消下面注释
      # 检查mmu舵机是否在正确位置
      # {% if printer.mmu is defined and printer.mmu.enabled %}
      #    {% if printer.configfile.config.mmu.sync_to_extruder %}
      #      MMU_SYNC_GEAR_MOTOR SYNC=1
      #    {% else %}
      #      MMU_SERVO POS=up
      #    {% endif %}
      # {% endif %} 

##########################################################################################
# 加热热端
#
      {% if printer.extruder.temperature < purge_temp_min %}
        {% if printer.extruder.target < purge_temp_min %}
          M109 S{purge_temp_min}
        {% else %}
          TEMPERATURE_WAIT SENSOR=extruder MINIMUM={purge_temp_min}
        {% endif %}
      {% endif %}

##########################################################################################
# 开始迭代
#
      # 根据清洗长度和最大迭代长度计算总迭代次数。
      {% set blobs = (purge_len / purge_length_maximum)|round(0, 'ceil')|int %}
      {% set purge_per_blob = purge_len|float / blobs %}
      {% set retracts_per_blob = (purge_per_blob / 40)|round(0, 'ceil')|int %}
      {% set purge_per_retract = (purge_per_blob / retracts_per_blob)|int %}
      {% set pulses_per_retract = (purge_per_blob / retracts_per_blob / 5)|round(0, 'ceil')|int %}
      {% set pulses_per_blob = (purge_per_blob / 5)|round(0, 'ceil')|int %}
      {% set purge_per_pulse = purge_per_blob / pulses_per_blob %}
      {% set pulse_time_constant = purge_per_pulse * 0.95 / purge_spd / (purge_per_pulse * 0.95 / purge_spd + purge_per_pulse * 0.05 / 50) %}
      {% set pulse_duration = purge_per_pulse / purge_spd %}

      # 移动到冲刷位置     
      {% set pos_now = printer.gcode_move.gcode_position %}
      {% if pos_now.x != purge_x and pos_now.y != purge_y %}
        BLOBIFIER_X_PARK
      {% endif %}
      
      # 冲刷开始时先挤出一部分耗材已补偿在这之前的耗材溢出，便于blob附着在托盘上。
      G91 
      M83
      G1 E{filament_oozing_adjust} F{purge_spd}

      # 重复冲刷过程，直到达到预定的量
      {% for blob in range(blobs) %}
        RESPOND MSG={"'BLOBIFIER: Blob %d of %d (%.1fmm)'" % (blob + 1, blobs, purge_per_blob)}

        # 相对定位
        G91 
        M83
        
        # 脉动冲刷
        {% for pulse in range(pulses_per_blob) %}
          # 计算托盘速度
          {% set purged_this_blob = pulse * purge_per_pulse %}
          {% set bl_last_pos = ((purged_this_blob)/purge_length_maximum)**bl_drop_exp * bl_drop %}
          {% set bl_pos = ((purged_this_blob + purge_per_pulse)/purge_length_maximum)**bl_drop_exp * bl_drop %}
          {% set bl_move = bl_pos - bl_last_pos %}
          {% set speed = bl_move / pulse_duration %}
          {% set bl_speed = speed / 60 %}

          # 快速冲刷
          MANUAL_STEPPER STEPPER=blobifier_x SET_POSITION=0
          MANUAL_STEPPER STEPPER=blobifier_x MOVE={bl_move * pulse_time_constant} SPEED={bl_speed} SYNC=0
          G1 E{purge_per_pulse * 0.95} F{purge_spd}
          # 慢慢冲刷
          MANUAL_STEPPER STEPPER=blobifier_x SET_POSITION=0
          MANUAL_STEPPER STEPPER=blobifier_x MOVE={bl_move * (1 - pulse_time_constant)} SPEED={bl_speed} SYNC=0
          G1 E{purge_per_pulse * 0.05} F{purge_spd}

          # 重复回抽-挤出过程，以便更好的清洁
          {% if pulse % pulses_per_retract == 0 and pulse > 0 %}
            G1 E-2 F1800
            G1 E2 F800
          {% endif %}
        {% endfor %}

##########################################################################################
# DEPOSIT BLOB
#
        # 托盘下降一点，以减轻对blob的压力，防止它向侧面移动
        BLOBIFIER_X_MOVE_RELATIVE MOVE={eject_hop}
		G90
	    G1 X{kick_ready_x} F{travel_spd_xy}
        {% if blob + 1 < blobs %}
          BLOBIFIER_X_MOVE MOVE=0
          G1 X{purge_x} F{blob_kick_spd}
        {% endif %}
      {% endfor %}
    {% endif %}

    G4 P{pressure_release_time}   #等待一会，让喷嘴自行溢出一些耗材，以便清洁后更少溢出
    BLOBIFIER_X_CLEAN
    #喷嘴移出冲刷/清洁位置
    #G90
    #G1 Y{yield_y} F{travel_spd_xy}
				 
##########################################################################################
# 恢复打印机状态
#   
    # 进行最后的回抽，以匹配Happy Hare的预期。
    G1 E-{park_vars.retracted_length} F{sequence_vars.retract_speed * 60}
    
    {% if part_cooling_fan >= 0 %}
      # 如果模型风扇被改变，恢复其之前状态。
      M106 S{(backup_fan_speed * 255)|int}
    {% endif %}
    
    M220 S{(backup_feedrate * 100)|int}
  {% endif %}
  
  RESTORE_GCODE_STATE NAME=BLOBIFIER_X_state 

##########################################################################################
# 擦嘴宏，仅针对本人自己的擦嘴结构，如要使用，请自行适配。
#
[gcode_macro BLOBIFIER_X_CLEAN]
variable_retract_before_print: 0.0
gcode:
  {% set bl = printer['gcode_macro BLOBIFIER_X'] %}
  {% set pos_now = printer.gcode_move.gcode_position %}
  
  SAVE_GCODE_STATE NAME=BLOBIFIER_X_CLEAN_state

  G90
  
  G1 X{bl.wiper_x - 10} F{bl.travel_spd_xy}
  {% for wipes in range(1, (bl.wipe_qty + 1)) %}
    G1 X{bl.wiper_x + 10} F{bl.wipe_spd_xy}        
    G1 X{bl.wiper_x - 10} F{bl.wipe_spd_xy}         
  {% endfor %}
   #G1 E-{retract_before_print} F{bl.retract_speed}
  
  RESTORE_GCODE_STATE NAME=BLOBIFIER_X_CLEAN_state


##########################################################################################
# 将喷嘴放在托盘上，以防止在灯丝交换过程中渗出。
# 将这个扩展放在mmu宏vars.cfg中的预卸载扩展中
# mmu_macro_vars.cfg: variable_user_pre_unload_extension: "BLOBIFIER_X_PARK"
#
[gcode_macro BLOBIFIER_X_PARK]
gcode:
  {% set bl = printer['gcode_macro BLOBIFIER_X'] %}

  SAVE_GCODE_STATE NAME=BLOBIFIER_X_park_state
  
  {% if "xy" in printer.toolhead.homed_axes %}
    {% set pos_now = printer.gcode_move.gcode_position %}
    G90
    {% if pos_now.x != bl.purge_x and pos_now.y != bl.purge_y %}
      {% if pos_now.y > bl.yield_y %}
        G1 Y{bl.yield_y} F{bl.travel_spd_xy}
        G1 X{bl.kick_ready_x} F{bl.travel_spd_xy}
      {% endif %}
      G1 X{bl.kick_ready_x} Y{bl.yield_y} F{bl.travel_spd_xy}
      G1 Y{bl.purge_y} F{bl.travel_spd_xy}
    {% endif %}
    BLOBIFIER_X_HOME
    G1 X{bl.purge_x} F{bl.travel_spd_xy}
  {% else %}
    {action_respond_info("BLOBIFIER_X: 请先归零XY")}
  {% endif %}
					 
  RESTORE_GCODE_STATE NAME=BLOBIFIER_X_park_state


##########################################################################################
# 托盘绝对移动控制。
#
[gcode_macro BLOBIFIER_X_MOVE]
gcode:
	{% set blh = printer['gcode_macro BLOBIFIER_X_HOME'] %}
	{% set move = params.MOVE|float %}
	{% if blh.bl_homed == 1 %}
		MANUAL_STEPPER STEPPER=blobifier_x MOVE={move}
	{% else %}
		RESPOND MSG="BLOBIFIER_X 未归零，正在归零中，将在归零后完成移动"
		BLOBIFIER_X_HOME
		MANUAL_STEPPER STEPPER=blobifier_x MOVE={move}
	{% endif %}

##########################################################################################
# 托盘相对移动控制。
#
[gcode_macro BLOBIFIER_X_MOVE_RELATIVE]
gcode:
	{% set move = params.MOVE|float %}
	MANUAL_STEPPER STEPPER=blobifier_x SET_POSITION=0
	MANUAL_STEPPER STEPPER=blobifier_x MOVE={move}

##########################################################################################
# 托盘归零。调节限位螺钉，使其触发时，托盘与喷嘴之间保持约0.2~0.6mm间隙。
#
[gcode_macro BLOBIFIER_X_HOME]
variable_bl_homed: 0
gcode:
    {% set bl = printer['gcode_macro BLOBIFIER_X'] %}
    {% set mp = - bl.bl_position_max %}
	MANUAL_STEPPER STEPPER=blobifier_x MOVE={mp - 1} STOP_ON_ENDSTOP=1 SYNC=0
	MANUAL_STEPPER STEPPER=blobifier_x SET_POSITION=0
	SET_GCODE_VARIABLE MACRO=BLOBIFIER_X_HOME VARIABLE=bl_homed VALUE=1
    {action_respond_info("BLOBIFIER_X: 已归零")}

##########################################################################################
# 位置重置。将当前位置设为零。
#
[gcode_macro BLOBIFIER_X_RESET]
gcode:
	MANUAL_STEPPER STEPPER=blobifier_x SET_POSITION=0
	SET_GCODE_VARIABLE MACRO=BLOBIFIER_X_HOME VARIABLE=bl_homed VALUE=0
    {action_respond_info("BLOBIFIER_X: 已重置，当前位置为零")}

##########################################################################################
# 合理性检查。
#
[delayed_gcode BLOBIFIER_X_INIT]
initial_duration: 5.0
gcode:
  _BLOBIFIER_X_INIT

[gcode_macro _BLOBIFIER_X_INIT]
gcode:
  {% set bl = printer['gcode_macro BLOBIFIER_X'] %}

  # 模型冷却风扇参数有效性检查
  {% if bl.part_cooling_fan != -1 and (bl.part_cooling_fan < 0 or bl.part_cooling_fan > 1) %}
    {action_emergency_stop("BLOBIFIER_X: 值 %f 对于变量 part_cooling_fan 是无效的，请设置为 -1 或者 0 - 1 中间的任意数" % (bl.part_cooling_fan))}
  {% endif %}

  # 宏调用情况检查
  {% if printer.mmu %}
    {% if printer['gcode_macro _MMU_SEQUENCE_VARS'].user_post_load_extension != 'BLOBIFIER_X' %}
      {action_respond_info("BLOBIFIER_X: BLOBIFIER_X未启用，建议设置 user_post_load_extension为BLOBIFIER_X，详见 mmu_macro_vars.cfg")}
    {% elif printer['gcode_macro _MMU_SEQUENCE_VARS'].user_post_load_extension == 'BLOBIFIER_X' %}
      {% if printer['gcode_macro _MMU_SEQUENCE_VARS'].user_pre_unload_extension != 'BLOBIFIER_X_PARK' %}
        {action_respond_info("BLOBIFIER_X: BLOBIFIER_X已启用，建议设置 user_pre_unload_extension为BLOBIFIER_X_PARK，详见 mmu_macro_vars.cfg")}
      {% endif %}
    {% endif %}
  {% endif %}

  